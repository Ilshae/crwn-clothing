{"version":3,"sources":["components/stripe-button/stripe-button.component.jsx","components/checkout-item/checkout-item.component.jsx","pages/checkout/checkout.styles.jsx","pages/checkout/checkout.component.jsx"],"names":["StripeCheckoutButton","_ref","price","priceForStripe","react_default","a","createElement","main_default","label","name","billingAddress","shippingAddress","image","description","concat","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","imageUrl","quantity","checkout_item_styles","src","alt","onClick","fadeIn","keyframes","_templateObject","CheckoutPageContainer","styled","div","_templateObject2","CheckoutHeaderContainer","_templateObject3","HeaderBlockContainer","_templateObject4","TotalContainer","_templateObject5","WarningContainer","_templateObject6","__webpack_require__","d","__webpack_exports__","checkout_component_CheckoutPage","CheckoutPage","cartItems","total","map","checkout_item_component","key","id","stripe_button_component","mapStateToProps","createStructuredSelector","selectCartItems","selectCartTotal"],"mappings":"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","file":"static/js/6.6540780a.chunk.js","sourcesContent":["import React from 'react';\r\nimport StripeCheckout from 'react-stripe-checkout';\r\nimport axios from 'axios';\r\n\r\nconst StripeCheckoutButton = ({ price }) => {\r\n  const priceForStripe = price * 100;\r\n  const publishableKey = 'pk_test_51HsBj7E1gngEBdOJAeecjW1trv6PA2Z3oHhxYuBOkpWxt0jBggVN23iXi7mSSaB7HduB4kypr4zg9JOoIwhwIaVc00cNXUeKBl';\r\n\r\n\r\n  const onToken = token => {\r\n    axios({\r\n      url: 'payment',\r\n      method: 'post',\r\n      data: {\r\n        amount: priceForStripe,\r\n        token: token\r\n      }\r\n    })\r\n      .then(response => {\r\n        alert('succesful payment');\r\n      })\r\n      .catch(error => {\r\n        console.log('Payment Error: ', JSON.parse(error));\r\n        alert(\r\n          'There was an issue with your payment! Please make sure you use the provided credit card.'\r\n        );\r\n      });\r\n  };\r\n\r\n  return (\r\n    <StripeCheckout\r\n      label='Pay Now'\r\n      name='CRWN Clothing Ltd.'\r\n      billingAddress\r\n      shippingAddress\r\n      image='https://sendeyo.com/up/d/f3eb2117da'\r\n      description={`Your total is $${price}`}\r\n      amount={priceForStripe}\r\n      panelLabel='Pay Now'\r\n      token={onToken}\r\n      stripeKey={publishableKey}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StripeCheckoutButton;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  clearItemFromCart,\r\n  addItem,\r\n  removeItem\r\n} from '../../redux/cart/cart.actions';\r\n\r\nimport {\r\n  CheckoutItemContainer,\r\n  ImageContainer,\r\n  TextContainer,\r\n  QuantityContainer,\r\n  RemoveButtonContainer\r\n} from './checkout-item.styles';\r\n\r\nexport const CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\r\n  const { name, imageUrl, price, quantity } = cartItem;\r\n  return (\r\n    <CheckoutItemContainer>\r\n      <ImageContainer>\r\n        <img src={imageUrl} alt='item' />\r\n      </ImageContainer>\r\n      <TextContainer>{name}</TextContainer>\r\n      <QuantityContainer>\r\n        <div onClick={() => removeItem(cartItem)}>&#10094;</div>\r\n        <span>{quantity}</span>\r\n        <div onClick={() => addItem(cartItem)}>&#10095;</div>\r\n      </QuantityContainer>\r\n      <TextContainer>{price}</TextContainer>\r\n      <RemoveButtonContainer onClick={() => clearItem(cartItem)}>\r\n        &#10005;\r\n      </RemoveButtonContainer>\r\n    </CheckoutItemContainer>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  clearItem: item => dispatch(clearItemFromCart(item)),\r\n  addItem: item => dispatch(addItem(item)),\r\n  removeItem: item => dispatch(removeItem(item))\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(CheckoutItem);\r\n","import styled, {keyframes} from 'styled-components';\r\n\r\nconst fadeIn = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nexport const CheckoutPageContainer = styled.div`\r\n  animation: 0.2s ${fadeIn};\r\n  width: 55%;\r\n  min-height: 90vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 50px auto 0;\r\n\r\n  button {\r\n    margin-left: auto;\r\n    margin-top: 50px;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n\r\nexport const CheckoutHeaderContainer = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid darkgrey;\r\n`;\r\n\r\nexport const HeaderBlockContainer = styled.div`\r\n  text-transform: capitalize;\r\n  width: 23%;\r\n\r\n  &:last-child {\r\n    width: 8%;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    width: 22%;\r\n\r\n    &:last-child {\r\n      width: 12%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const TotalContainer = styled.div`\r\n  margin-top: 30px;\r\n  margin-left: auto;\r\n  font-size: 36px;\r\n`;\r\n\r\nexport const WarningContainer = styled.div`\r\n  text-align: center;\r\n  margin-top: 40px;\r\n  font-size: 24px;\r\n  color: #bf0d46;\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component';\r\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\r\n\r\nimport {\r\n  selectCartItems,\r\n  selectCartTotal\r\n} from '../../redux/cart/cart.selectors';\r\n\r\nimport {\r\n  CheckoutPageContainer,\r\n  CheckoutHeaderContainer,\r\n  HeaderBlockContainer,\r\n  TotalContainer,\r\n  WarningContainer\r\n} from './checkout.styles';\r\n\r\nexport const CheckoutPage = ({ cartItems, total }) => (\r\n  <CheckoutPageContainer>\r\n    <CheckoutHeaderContainer>\r\n      <HeaderBlockContainer>\r\n        <span>Product</span>\r\n      </HeaderBlockContainer>\r\n      <HeaderBlockContainer>\r\n        <span>Description</span>\r\n      </HeaderBlockContainer>\r\n      <HeaderBlockContainer>\r\n        <span>Quantity</span>\r\n      </HeaderBlockContainer>\r\n      <HeaderBlockContainer>\r\n        <span>Price</span>\r\n      </HeaderBlockContainer>\r\n      <HeaderBlockContainer>\r\n        <span>Remove</span>\r\n      </HeaderBlockContainer>\r\n    </CheckoutHeaderContainer>\r\n    {cartItems.map(cartItem => (\r\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\r\n    ))}\r\n    <TotalContainer>TOTAL: ${total}</TotalContainer>\r\n    <WarningContainer>\r\n      Github Pages does not allow payments to send but the functionality is here :) <br/><br/>\r\n      *Please use the following test credit card for payments*\r\n      <br />\r\n      4242 4242 4242 4242 - Exp: 01/20 - CVV: 123\r\n    </WarningContainer>\r\n    <StripeCheckoutButton price={total} />\r\n  </CheckoutPageContainer>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n  total: selectCartTotal\r\n});\r\n\r\nexport default connect(mapStateToProps)(CheckoutPage);\r\n"],"sourceRoot":""}